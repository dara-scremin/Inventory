// TypeScript Inventory Management

// Product interface
interface Product {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

// Inventory class
class InventoryManager {
  private products: Product[] = [];

  constructor() {}

  // Add product to inventory
  addProduct(product: Product): void {
    const existingProduct = this.products.find((p) => p.id === product.id);

    if (existingProduct) {
      existingProduct.quantity += product.quantity;
    } else {
      this.products.push(product);
    }
  }

  // Sell product from inventory
  sellProduct(productId: string, quantity: number): void {
    const productIndex = this.products.findIndex((p) => p.id === productId);

    if (productIndex >= 0) {
      const product = this.products[productIndex];

      if (product.quantity >= quantity) {
        product.quantity -= quantity;
        console.log(`Sold ${quantity} ${product.name}(s).`);
      } else {
        console.log(`Insufficient quantity of ${product.name} in stock.`);
      }
    } else {
      console.log(`Product with ID ${productId} not found in inventory.`);
    }
  }

  // List all products in inventory
  listProducts(): void {
    console.log('Inventory List:');
    this.products.forEach((product) => {
      console.log(`ID: ${product.id}`);
      console.log(`Name: ${product.name}`);
      console.log(`Price: $${product.price}`);
      console.log(`Quantity: ${product.quantity}`);
      console.log('---');
    });
  }
}

// Usage example
const inventory = new InventoryManager();

const product1: Product = {
  id: 'p1',
  name: 'Apple',
  price: 0.5,
  quantity: 50,
};
const product2: Product = {
  id: 'p2',
  name: 'Orange',
  price: 0.4,
  quantity: 30,
};

inventory.addProduct(product1);
inventory.addProduct(product2);

inventory.listProducts();

inventory.sellProduct('p1', 20);
inventory.sellProduct('p2', 10);
inventory.sellProduct('p3', 5);

inventory.listProducts();
